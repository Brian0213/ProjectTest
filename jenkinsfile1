pipeline {
    agent any
    
    options {
        timestamps()
    }
    
    triggers {
        pollSCM('H/15 0 * * *')
    }
    
    stages {
        stage('Setup Chrome') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            # Install Chrome
                            wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                            sudo apt-get update
                            sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
                            rm google-chrome-stable_current_amd64.deb
                            
                            # Install ChromeDriver
                            CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
                            CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.chromium.org/downloads" | grep -oP "ChromeDriver \K[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep "^$CHROME_VERSION" | head -n 1)
                            wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
                            unzip -o chromedriver_linux64.zip
                            chmod +x chromedriver
                            sudo mv chromedriver /usr/local/bin/
                            rm chromedriver_linux64.zip
                            
                            # Verify installations
                            google-chrome --version
                            chromedriver --version
                        '''
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: '447bbc4c-d2c8-40c9-a6f3-61e5e8b936b6',
                        url: 'https://github.com/Brian0213/ProjectTest.git'
                    ]]
                )
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            python3 -m venv venv
                            . venv/bin/activate
                            pip install --upgrade pip
                            pip install -r requirements.txt
                            pip install pytest pytest-html pytest-xdist
                            pip install selenium webdriver-manager
                        '''
                    } else {
                        bat '''
                            python -m venv venv
                            venv\\Scripts\\activate
                            pip install --upgrade pip
                            pip install -r requirements.txt
                            pip install pytest pytest-html pytest-xdist
                            pip install selenium webdriver-manager
                        '''
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            . venv/bin/activate
                            export PYTHONPATH=$WORKSPACE
                            pytest testCases/* --alluredir=./allurereports --html=Reports/index.html
                        '''
                    } else {
                        bat '''
                            venv\\Scripts\\activate
                            set PYTHONPATH=%WORKSPACE%
                            pytest testCases/* --alluredir=./allurereports --html=Reports\\index.html
                        '''
                    }
                }
            }
        }
        
        stage('Publish Reports') {
            steps {
                script {
                    allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: 'allurereports']]
                    ])
                    
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: false,
                        reportDir: 'Reports',
                        reportFiles: 'index.html',
                        reportName: 'HTML Report',
                        reportTitles: '',
                        useWrapperFileDirectly: true
                    ])
                }
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: 'Reports/**', allowEmptyArchive: true
                cleanWs()
            }
        }
    }
}
