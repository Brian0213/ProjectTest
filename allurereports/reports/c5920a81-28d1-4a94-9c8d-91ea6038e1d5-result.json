{"name": "test_logo", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 105\nCurrent browser version is 108.0.5359.125 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00A5DF13+2219795]\n\tOrdinal0 [0x009F2841+1779777]\n\tOrdinal0 [0x0090423D+803389]\n\tOrdinal0 [0x009264AC+943276]\n\tOrdinal0 [0x009219F0+924144]\n\tOrdinal0 [0x0091F179+913785]\n\tOrdinal0 [0x009536B9+1128121]\n\tOrdinal0 [0x0095331A+1127194]\n\tOrdinal0 [0x0094E616+1107478]\n\tOrdinal0 [0x00927F89+950153]\n\tOrdinal0 [0x00928F56+954198]\n\tGetHandleVerifier [0x00D52CB2+3040210]\n\tGetHandleVerifier [0x00D42BB4+2974420]\n\tGetHandleVerifier [0x00AF6A0A+565546]\n\tGetHandleVerifier [0x00AF5680+560544]\n\tOrdinal0 [0x009F9A5C+1808988]\n\tOrdinal0 [0x009FE3A8+1827752]\n\tOrdinal0 [0x009FE495+1827989]\n\tOrdinal0 [0x00A080A4+1867940]\n\tBaseThreadInitThunk [0x74FF7D69+25]\n\tRtlInitializeExceptionChain [0x7726BB9B+107]\n\tRtlClearBits [0x7726BB1F+191]", "trace": "self = <allurereports.test_orangehrm.TestHRM object at 0x0000021F7AE6D390>\n\n    @allure.severity(allure.severity_level.MINOR)\n    def test_logo(self):\n>       self.driver=webdriver.Chrome(r\"C:\\Users\\oluse\\Downloads\\chromedriver_win32 (11)\\chromedriver.exe\")\n\nallurereports\\test_orangehrm.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:81: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:106: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:288: in __init__\n    self.start_session(capabilities, browser_profile)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:381: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021F7AE6D780>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...dInitThunk [0x74FF7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726BB9B+107]\\\\n\\\\tRtlClearBits [0x7726BB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 105\nE       Current browser version is 108.0.5359.125 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00A5DF13+2219795]\nE       \tOrdinal0 [0x009F2841+1779777]\nE       \tOrdinal0 [0x0090423D+803389]\nE       \tOrdinal0 [0x009264AC+943276]\nE       \tOrdinal0 [0x009219F0+924144]\nE       \tOrdinal0 [0x0091F179+913785]\nE       \tOrdinal0 [0x009536B9+1128121]\nE       \tOrdinal0 [0x0095331A+1127194]\nE       \tOrdinal0 [0x0094E616+1107478]\nE       \tOrdinal0 [0x00927F89+950153]\nE       \tOrdinal0 [0x00928F56+954198]\nE       \tGetHandleVerifier [0x00D52CB2+3040210]\nE       \tGetHandleVerifier [0x00D42BB4+2974420]\nE       \tGetHandleVerifier [0x00AF6A0A+565546]\nE       \tGetHandleVerifier [0x00AF5680+560544]\nE       \tOrdinal0 [0x009F9A5C+1808988]\nE       \tOrdinal0 [0x009FE3A8+1827752]\nE       \tOrdinal0 [0x009FE495+1827989]\nE       \tOrdinal0 [0x00A080A4+1867940]\nE       \tBaseThreadInitThunk [0x74FF7D69+25]\nE       \tRtlInitializeExceptionChain [0x7726BB9B+107]\nE       \tRtlClearBits [0x7726BB1F+191]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: SessionNotCreatedException"}, "start": 1672250104779, "stop": 1672250108888, "uuid": "e1421f6e-eb47-4df5-a748-077e44befb2e", "historyId": "2ca3be51ac034d7b2f89e6464b0beddd", "testCaseId": "3f4329de25a09772557527799dc31ebf", "fullName": "allurereports.test_orangehrm.TestHRM#test_logo", "labels": [{"name": "severity", "value": "minor"}, {"name": "parentSuite", "value": "allurereports"}, {"name": "suite", "value": "test_orangehrm"}, {"name": "subSuite", "value": "TestHRM"}, {"name": "host", "value": "LAPTOP-V0P341PO"}, {"name": "thread", "value": "33352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "allurereports.test_orangehrm"}]}